<div class="card">
  <%= simple_form_for([:dashboard, @broadcast]) do |f| %>
    <div class="card-body">
      <div class="row">
        <div class="col">
          <%= f.input :channel %>
        </div>
        <div class="col">
          <div class="row">
            <div class="col">
              <%= f.input :audio_file, as: :file, input_html: { direct_upload: true, accept: Broadcast::AUDIO_CONTENT_TYPES.join(", ") } %>
            </div>
            <% if @broadcast.object.audio_file.attached? %>
              <div class="col">
                <%= audio_tag(@broadcast.audio_file, controls: true, class: "mt-3") %>
              </div>
            <% end %>
          </div>
        </div>
      </div>

      <div class="hr-text">Beneficiary Filters</div>
      <div class="row">
        <div class="col"><label class="form-label">Field</label></div>
        <div class="col"><label class="form-label">Operator</label></div>
        <div class="col"><label class="form-label">Value</label></div>
      </div>

      <%= f.simple_fields_for(:beneficiary_filter, @broadcast.beneficiary_filter) do |filter_form| %>
        <% filter_form.object.class.attributes.each do |attribute_name, attribute_type| %>
          <% field_definition = FieldDefinitions::BeneficiaryFields.find_by!(name: attribute_name) %>
          <% next if CountryAddressData.supported?(current_account.iso_country_code) && attribute_type.form == BroadcastForm::BeneficiaryFilterForm::AddressFieldForm %>

          <%= filter_form.simple_fields_for(attribute_name, filter_form.object.attributes[attribute_name]) do |field_form| %>
            <% element_id = field_form.object_name.parameterize.underscore %>
            <div class="row" id="<%= element_id %>" data-controller="beneficiary-filter-field">
              <div class="col">
                <div class="input-group mb-3">
                  <span class="input-group-text">
                    <input class="form-check-input m-0" id="<%= "#{element_id}_enabled" %>" type="checkbox" <%= "checked" if field_form.object.present? %> data-beneficiary-filter-field-target="toggleElement" data-action="beneficiary-filter-field#toggle" />
                  </span>
                  <input class="form-control" type="text" value="<%= field_definition.human_name(namespace: current_account.iso_country_code) %>" readonly data-beneficiary-filter-field-target="fieldName" />
                </div>
              </div>

              <div class="col">
                <%= field_form.input :operator, label: false, as: :select, collection: field_definition.operator_options_for_select, required: true, input_html: { data: { "beneficiary-filter-field-target": "operator", action: "beneficiary-filter-field#operatorChanged" } } %>
              </div>

              <div class="col">
                <div class="value-input hidden">
                  <% base_options = { label: false, required: true, input_html: { data: { "beneficiary-filter-field-target": "value" } } } %>
                  <% case field_definition.schema %>
                  <% when FieldDefinitions::FilterSchema::ListType %>
                    <%= field_form.input(:value, as: :select, collection: field_definition.schema.options_for_select, **base_options) %>
                  <% when FieldDefinitions::FilterSchema::StringType %>
                    <%= field_form.input(:value, as: :string, **base_options.deep_merge(input_html: { class: "w-100", minlength: field_definition.schema.options[:length], maxlength: field_definition.schema.options[:length] })) %>
                  <% when FieldDefinitions::FilterSchema::ValueType %>
                    <% base_options = base_options.deep_merge(input_html: { value: "" }) if field_form.object.present? && field_form.object.value.is_a?(Array) %>
                    <%= field_form.input(:value, as: field_definition.schema.form_value_type, html5: true, **base_options) %>
                  <% end %>
                </div>

                <% if field_definition.schema.is_a?(FieldDefinitions::FilterSchema::ValueType) %>
                  <% base_options = { label: false, required: true, wrapper: false, input_html: { name: "#{field_form.object_name}[value][]", data: { "beneficiary-filter-field-target": "betweenValue" } } } %>
                  <% existing_field_values = field_form.object&.operator == "between" ? field_form.object.value : [] %>
                  <div class="between-value-input hidden">
                    <div class="row">
                      <div class="col">
                        <%= field_form.input(:value, as: field_definition.schema.form_value_type, html5: true, **base_options.deep_merge(input_html: { value: existing_field_values[0] })) %>
                      </div>
                      <div class="col">
                        <%= field_form.input(:value, as: field_definition.schema.form_value_type, html5: true, **base_options.deep_merge(input_html: { value: existing_field_values[1] })) %>
                      </div>
                    </div>
                  </div>
                <% end %>

                <div class="multi-value-input hidden">
                  <% selected_values = FieldDefinitions::Field::MULTIPLE_SELECTION_OPERATORS.include?(field_form.object&.operator) ? field_form.object.value : [] %>
                  <% base_options = { label: false, required: true, include_hidden: false, multiple: true, selected: selected_values } %>
                  <% if field_definition.schema.is_a?(FieldDefinitions::FilterSchema::ListType) %>
                    <%= field_form.input(:value, as: :select, collection: field_definition.schema.options_for_select, input_html: { class: "list-select", data: { "beneficiary-filter-field-target": "multiValue" } }, **base_options) %>
                  <% else %>
                    <%= field_form.input(:value, as: :select, collection: selected_values, input_html: { class: "input-tags", data: { "beneficiary-filter-field-target": "multiValue" } }, **base_options) %>
                  <% end %>
                </div>

                <div class="is-null-value-input hidden">
                  <%= field_form.input(:value, label: false, as: :select, required: true, input_html: { data: { "beneficiary-filter-field-target": "isNullValue" } }) %>
                </div>
              </div>
            </div>
          <% end %>
        <% end %>

        <% if CountryAddressData.supported?(current_account.iso_country_code) %>
          <% address_field_name = CountryAddressData.address_field_name(current_account.iso_country_code) %>
          <% field_definition = FieldDefinitions::BeneficiaryFields.find_by!(name: address_field_name) %>
          <%= filter_form.simple_fields_for(address_field_name, filter_form.object.attributes[address_field_name.to_s]) do |address_field| %>
            <% element_id = address_field.object_name.parameterize.underscore %>
            <div class="row"
                 id="<%= element_id %>"
                 data-controller="beneficiary-addresses-filter-field"
                 data-beneficiary-addresses-filter-field-data-value="<%= treeview_address_data.to_json %>"
                 data-beneficiary-addresses-filter-field-selected-value="<%= Array(address_field.object&.value).to_json %>"
                 data-beneficiary-addresses-filter-field-field-name-value="<%= address_field.object_name %>">
              <div class="col">
                <div class="input-group mb-1">
                  <span class="input-group-text">
                    <input class="form-check-input m-0"
                           id="<%= "#{element_id}_enabled" %>"
                           type="checkbox"
                           <%= "checked" if address_field.object&.value.present? %>
                           data-beneficiary-addresses-filter-field-target="toggleElement"
                           data-action="beneficiary-addresses-filter-field#toggle"
                           data-bs-toggle="collapse"
                           data-bs-target="#addresses-treeview" />
                  </span>
                  <input class="form-control"
                         type="text"
                         value="<%= field_definition.human_name(namespace: current_account.iso_country_code) %>"
                         readonly
                         data-beneficiary-addresses-filter-field-target="fieldName" />

                  <%= address_field.input(:operator, as: :hidden, input_html: { value: "in", data: { "beneficiary-addresses-filter-field-target": "operator" } }) %>
                </div>

                <div id="addresses-treeview"
                     class="collapse overflow-auto <%= "show" if address_field.object&.value.present? %>"
                     data-beneficiary-addresses-filter-field-target="treeview">
                </div>
              </div>
            </div>
          <% end %>
        <% end %>
      <% end %>
    </div>

    <div class="card-footer text-end">
      <%= f.button :submit, class: 'btn btn-primary' %>
    </div>
  <% end %>
</div>
