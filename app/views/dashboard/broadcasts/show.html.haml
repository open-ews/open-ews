= content_for(:page_actions) do
  - state_machine = BroadcastStateMachine.new(resource.status)
  - if state_machine.may_transition_to?(:running)
    = button_to(dashboard_broadcast_path(resource), params: { broadcast: { desired_status: "running" } }, method: :patch, class: "btn btn-outline-success", form_class: "d-inline", form: { data: { turbo_confirm: translate(:"titles.actions.data_confirm")}}) do
      %i.icon.ti.ti-player-play
      = translate(:"titles.broadcasts.start")
  - elsif state_machine.may_transition_to?(:stopped)
    = button_to(dashboard_broadcast_path(resource), params: { broadcast: { desired_status: "stopped" } }, method: :patch, class: "btn btn-outline-danger", form_class: "d-inline", form: { data: { turbo_confirm: translate(:"titles.actions.data_confirm")}}) do
      %i.icon.ti.ti-player-pause
      = translate(:"titles.broadcasts.stop")

  - if state_machine.updatable?
    = render("shared/edit_resource_page_action", path: edit_dashboard_broadcast_path(resource))

.card
  .card-body
    = show_for(resource) do |f|
      = f.attribute :id
      = f.attribute :status, value: resource.status.humanize

      = f.attribute :audio_file do
        - if resource.audio_file.attached?
          = audio_tag(resource.audio_file, controls: true)

      = f.attribute :created_at, value: local_time(resource.created_at)
      = f.attribute :updated_at, value: local_time(resource.updated_at)

