on: push
name: Build

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    env:
      PGHOST: localhost
      PGUSER: postgres
      RAILS_ENV: test
      CI: true

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ""
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: ".tool-versions"
          cache: 'yarn'

      - name: Setup DB
        run: bundle exec rails db:create db:schema:load

      - name: Run Specs
        run: |
          bundle exec rails spec:prepare
          bundle exec rspec --format RspecApiDocumentation::ApiFormatter

      - name: Prepare Documentation Source
        if: github.ref == 'refs/heads/upgrade_fixes'
        run: |
          cp -R doc/slate/source/* doc/api
          cp app/assets/images/scfm_logo.png doc/api/logo.png

      - name: Upload Documentation Source
        if: github.ref == 'refs/heads/upgrade_fixes'
        uses: actions/upload-artifact@v3
        with:
          name: documentation_source
          path: doc/api

  build_documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/upgrade_fixes'

    steps:
      - name: Checkout Slate
        uses: actions/checkout@v3
        with:
          ref: main
          repository: slatedocs/slate

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          ruby-version: '3'

      - name: Download Documentation Source
        uses: actions/download-artifact@v3
        with:
          name: documentation_source
          path: source

      - name: Prepare Slate
        run: |
          echo "@import 'overrides';" >> source/stylesheets/_variables.scss

      - name: Build API Documentation
        run: bundle exec middleman build

      - name: Upload API Documentation
        uses: actions/upload-artifact@v3
        with:
          name: api_documentation
          path: build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-skip-session-tagging: true
          role-duration-seconds: 3600
          aws-region: ap-southeast-1

      - name: Deploy API Documentation
        run: aws s3 sync --acl public-read --delete build s3://www.somleng.org/docs/scfm

      - name: Invalidate Cache
        run: aws cloudfront create-invalidation --distribution-id E3962XCJFZ0KB1 --paths /docs/scfm/\*

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/upgrade_fixes'
    env:
      IMAGE_TAG: ${{ github.sha }}
      APP_IDENTIFIER: scfm
      ECR_PUBLIC_REGISTRY: public.ecr.aws
      APP_ECR_REPOSITORY_URI: public.ecr.aws/somleng/scfm
      NGINX_ECR_REPOSITORY_URI: public.ecr.aws/somleng/scfm-nginx
      APP_GHCR_REPOSITORY_URI: ghcr.io/somleng-scfm/scfm
      NGINX_GHCR_REPOSITORY_URI: ghcr.io/somleng-scfm/scfm-nginx

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-skip-session-tagging: true
          role-duration-seconds: 3600
          aws-region: ap-southeast-1

      - name: Login to AWS Public ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ECR_PUBLIC_REGISTRY }}
        env:
          AWS_REGION: us-east-1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push to AWS ECR `${{ env.APP_IDENTIFIER }}`
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ env.APP_ECR_REPOSITORY_URI }}:latest
            ${{ env.APP_ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG  }}
            ${{ env.APP_GHCR_REPOSITORY_URI }}:latest

      - name: Build and push to AWS ECR `nginx`
        uses: docker/build-push-action@v4
        with:
          context: "docker/nginx"
          push: true
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ env.NGINX_ECR_REPOSITORY_URI }}:latest
            ${{ env.NGINX_ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG  }}
            ${{ env.NGINX_GHCR_REPOSITORY_URI }}:latest

      - name: Get current webserver task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.APP_IDENTIFIER }}-webserver --query 'taskDefinition' > task-definition.json

      - name: Prepare nginx task definition
        id: render-nginx-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: nginx
          image: ${{ env.NGINX_ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }}

      - name: Prepare webserver task definition
        id: render-webserver-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-nginx-task-def.outputs.task-definition }}
          container-name: app
          image: ${{ env.APP_ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }}

      - name: Get current worker (Fargate) task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.APP_IDENTIFIER }}-worker-fargate --query 'taskDefinition' > task-definition.json

      - name: Prepare worker (Fargate) task definition
        id: render-fargate-worker-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: worker
          image: ${{ env.APP_ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }}

      - name: Register Fargate task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-fargate-worker-task-def.outputs.task-definition }}

      - name: Run DB Migrate
        run: |
          ./bin/ecs_run_task --cluster somleng --started-by db_migrate_ci --service ${{ env.APP_IDENTIFIER }}-worker --task-definition ${{ env.APP_IDENTIFIER }}-worker-fargate --launch-type FARGATE --command "bundle exec rails db:migrate"

      - name: Deploy Webserver
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-webserver-task-def.outputs.task-definition }}
          service: ${{ env.APP_IDENTIFIER }}-webserver
          cluster: somleng
          wait-for-service-stability: true

      - name: Deploy Worker
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-task-def.outputs.task-definition }}
          service: ${{ env.APP_IDENTIFIER }}-worker
          cluster: somleng
          wait-for-service-stability: true
